

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Jul 03 09:40:14 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173     0000                     	;# 
   174     0001                     	;# 
   175     0002                     	;# 
   176     0003                     	;# 
   177     0004                     	;# 
   178     0005                     	;# 
   179     0006                     	;# 
   180     0007                     	;# 
   181     0008                     	;# 
   182     0009                     	;# 
   183     000A                     	;# 
   184     000B                     	;# 
   185     000C                     	;# 
   186     000D                     	;# 
   187     000E                     	;# 
   188     000E                     	;# 
   189     000F                     	;# 
   190     0010                     	;# 
   191     0011                     	;# 
   192     0012                     	;# 
   193     0013                     	;# 
   194     0014                     	;# 
   195     0015                     	;# 
   196     0015                     	;# 
   197     0016                     	;# 
   198     0017                     	;# 
   199     0018                     	;# 
   200     0019                     	;# 
   201     001A                     	;# 
   202     001B                     	;# 
   203     001B                     	;# 
   204     001C                     	;# 
   205     001D                     	;# 
   206     001E                     	;# 
   207     001F                     	;# 
   208     0081                     	;# 
   209     0085                     	;# 
   210     0086                     	;# 
   211     0087                     	;# 
   212     0088                     	;# 
   213     0089                     	;# 
   214     008C                     	;# 
   215     008D                     	;# 
   216     008E                     	;# 
   217     0091                     	;# 
   218     0092                     	;# 
   219     0093                     	;# 
   220     0094                     	;# 
   221     0098                     	;# 
   222     0099                     	;# 
   223     009C                     	;# 
   224     009D                     	;# 
   225     009E                     	;# 
   226     009F                     	;# 
   227     010C                     	;# 
   228     010D                     	;# 
   229     010E                     	;# 
   230     010F                     	;# 
   231     018C                     	;# 
   232     018D                     	;# 
   233     0006                     _PORTBbits	set	6
   234     0018                     _RCSTAbits	set	24
   235     0007                     _PORTC	set	7
   236     0006                     _PORTB	set	6
   237     001F                     _ADCON0	set	31
   238     001A                     _RCREG	set	26
   239     0019                     _TXREG	set	25
   240     0065                     _RCIF	set	101
   241     0098                     _TXSTAbits	set	152
   242     0099                     _SPBRG	set	153
   243     0087                     _TRISC	set	135
   244     0086                     _TRISB	set	134
   245     009F                     _ADCON1	set	159
   246     009C                     _CMCON	set	156
   247     04C1                     _TRMT	set	1217
   248                           
   249                           	psect	strings
   250     0003                     __pstrings:
   251     0003                     stringtab:
   252     0003                     __stringtab:
   253     0003                     stringcode:	
   254                           ;	String table - string pointers are 1 byte each
   255                           
   256     0003                     stringdir:
   257     0003  3000               	movlw	high stringdir
   258     0004  008A               	movwf	10
   259     0005  0804               	movf	4,w
   260     0006  0A84               	incf	4,f
   261     0007  0782               	addwf	2,f
   262     0008                     __stringbase:
   263     0008  3400               	retlw	0
   264     0009                     __end_of__stringtab:
   265     0009                     STR_1:
   266     0009  3441               	retlw	65	;'A'
   267     000A  3441               	retlw	65	;'A'
   268     000B  3441               	retlw	65	;'A'
   269     000C  3400               	retlw	0
   270     000D                     STR_2:
   271     000D  3444               	retlw	68	;'D'
   272     000E  3444               	retlw	68	;'D'
   273     000F  3444               	retlw	68	;'D'
   274     0010  3400               	retlw	0
   275                           
   276                           	psect	cinit
   277     07F0                     start_initialization:	
   278                           ; #config settings
   279                           
   280     07F0                     __initialization:
   281                           
   282                           ; Clear objects allocated to BANK0
   283     07F0  1283               	bcf	3,5	;RP0=0, select bank0
   284     07F1  1303               	bcf	3,6	;RP1=0, select bank0
   285     07F2  01A0               	clrf	__pbssBANK0& (0+127)
   286     07F3  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   287     07F4  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   288     07F5  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   289     07F6  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   290     07F7  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   291     07F8  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   292     07F9  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   293     07FA  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   294     07FB  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   295     07FC                     end_of_initialization:	
   296                           ;End of C runtime variable initialization code
   297                           
   298     07FC                     __end_of__initialization:
   299     07FC  0183               	clrf	3
   300     07FD  120A  118A  2F97   	ljmp	_main	;jump to C main() function
   301                           
   302                           	psect	bssBANK0
   303     0020                     __pbssBANK0:
   304     0020                     _uart_rd:
   305     0020                     	ds	10
   306                           
   307                           	psect	cstackCOMMON
   308     0070                     __pcstackCOMMON:
   309     0070                     ?_UART_Write:
   310     0070                     ??_UART_Write:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0070                     ?_UART_Write_Text:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0070                     ?_UART_Read:	
   317                           ; 1 bytes @ 0x0
   318                           
   319     0070                     ??_UART_Read:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0070                     ?_UART_Read_Text:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0070                     ?_main:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ?_strcmp:	
   329                           ; 1 bytes @ 0x0
   330                           
   331     0070                     UART_Write@data:	
   332                           ; 2 bytes @ 0x0
   333                           
   334     0070                     strcmp@r:	
   335                           ; 1 bytes @ 0x0
   336                           
   337     0070                     UART_Read_Text@lenght:	
   338                           ; 1 bytes @ 0x0
   339                           
   340                           
   341                           ; 2 bytes @ 0x0
   342     0070                     	ds	1
   343     0071                     ??_UART_Write_Text:
   344                           
   345                           ; 1 bytes @ 0x1
   346     0071                     	ds	1
   347     0072                     ??_strcmp:
   348     0072                     ??_UART_Read_Text:	
   349                           ; 1 bytes @ 0x2
   350                           
   351     0072                     UART_Write_Text@i:	
   352                           ; 1 bytes @ 0x2
   353                           
   354                           
   355                           ; 2 bytes @ 0x2
   356     0072                     	ds	1
   357     0073                     UART_Read_Text@Output:
   358                           
   359                           ; 1 bytes @ 0x3
   360     0073                     	ds	1
   361     0074                     UART_Write_Text@text:
   362     0074                     strcmp@l:	
   363                           ; 1 bytes @ 0x4
   364                           
   365     0074                     UART_Read_Text@i:	
   366                           ; 1 bytes @ 0x4
   367                           
   368                           
   369                           ; 2 bytes @ 0x4
   370     0074                     	ds	2
   371     0076                     ??_main:
   372                           
   373                           	psect	maintext
   374     0797                     __pmaintext:	
   375                           ; 1 bytes @ 0x6
   376 ;;
   377 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   378 ;;
   379 ;; *************** function _main *****************
   380 ;; Defined at:
   381 ;;		line 18 in file "main.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : B00/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   395 ;;      Params:         0       0       0       0       0
   396 ;;      Locals:         0       0       0       0       0
   397 ;;      Temps:          0       0       0       0       0
   398 ;;      Totals:         0       0       0       0       0
   399 ;;Total ram usage:        0 bytes
   400 ;; Hardware stack levels required when called: 2
   401 ;; This function calls:
   402 ;;		_UART_Read_Text
   403 ;;		_UART_Write_Text
   404 ;;		_strcmp
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410     0797                     _main:	
   411                           ;psect for function _main
   412                           
   413     0797                     l774:	
   414                           ;incstack = 0
   415                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   416                           
   417                           
   418                           ;main.c: 19:     CMCON = 0x07;
   419     0797  3007               	movlw	7
   420     0798  1683               	bsf	3,5	;RP0=1, select bank1
   421     0799  1303               	bcf	3,6	;RP1=0, select bank1
   422     079A  009C               	movwf	28	;volatile
   423     079B                     l776:
   424                           
   425                           ;main.c: 20:     ADCON0 = 0x00;
   426     079B  1283               	bcf	3,5	;RP0=0, select bank0
   427     079C  1303               	bcf	3,6	;RP1=0, select bank0
   428     079D  019F               	clrf	31	;volatile
   429     079E                     l778:
   430                           
   431                           ;main.c: 21:     ADCON1 = 0x06;
   432     079E  3006               	movlw	6
   433     079F  1683               	bsf	3,5	;RP0=1, select bank1
   434     07A0  1303               	bcf	3,6	;RP1=0, select bank1
   435     07A1  009F               	movwf	31	;volatile
   436                           
   437                           ;main.c: 23:     TRISB = 0x00;
   438     07A2  0186               	clrf	6	;volatile
   439     07A3                     l780:
   440                           
   441                           ;main.c: 24:     TRISC = 0x80;
   442     07A3  3080               	movlw	128
   443     07A4  0087               	movwf	7	;volatile
   444     07A5                     l782:
   445                           
   446                           ;main.c: 25:     PORTB = 0x00;
   447     07A5  1283               	bcf	3,5	;RP0=0, select bank0
   448     07A6  1303               	bcf	3,6	;RP1=0, select bank0
   449     07A7  0186               	clrf	6	;volatile
   450     07A8                     l784:
   451                           
   452                           ;main.c: 26:     PORTC = 0x00;
   453     07A8  0187               	clrf	7	;volatile
   454     07A9                     l786:
   455                           
   456                           ;main.c: 29:     SPBRG = 31;
   457     07A9  301F               	movlw	31
   458     07AA  1683               	bsf	3,5	;RP0=1, select bank1
   459     07AB  1303               	bcf	3,6	;RP1=0, select bank1
   460     07AC  0099               	movwf	25	;volatile
   461     07AD                     l788:
   462                           
   463                           ;main.c: 30:     TXSTAbits.SYNC = 0;
   464     07AD  1218               	bcf	24,4	;volatile
   465     07AE                     l790:
   466                           
   467                           ;main.c: 31:     TXSTAbits.TXEN = 1;
   468     07AE  1698               	bsf	24,5	;volatile
   469     07AF                     l792:
   470                           
   471                           ;main.c: 32:     RCSTAbits.SPEN = 1;
   472     07AF  1283               	bcf	3,5	;RP0=0, select bank0
   473     07B0  1303               	bcf	3,6	;RP1=0, select bank0
   474     07B1  1798               	bsf	24,7	;volatile
   475     07B2                     l794:
   476                           
   477                           ;main.c: 33:     RCSTAbits.CREN = 1;
   478     07B2  1618               	bsf	24,4	;volatile
   479     07B3                     l796:
   480                           
   481                           ;main.c: 36:         UART_Read_Text(uart_rd,3);
   482     07B3  3003               	movlw	3
   483     07B4  00F0               	movwf	UART_Read_Text@lenght
   484     07B5  3000               	movlw	0
   485     07B6  00F1               	movwf	UART_Read_Text@lenght+1
   486     07B7  3020               	movlw	(low (_uart_rd| 0))& (0+255)
   487     07B8  120A  118A  2734  120A  118A  	fcall	_UART_Read_Text
   488     07BD                     l798:
   489                           
   490                           ;main.c: 37:         if (strcmp(uart_rd, "AAA") == 0){
   491     07BD  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   492     07BE  00F0               	movwf	strcmp@r
   493     07BF  3020               	movlw	(low (_uart_rd| 0))& (0+255)
   494     07C0  120A  118A  2762  120A  118A  	fcall	_strcmp
   495     07C5  0870               	movf	?_strcmp,w
   496     07C6  0471               	iorwf	?_strcmp+1,w
   497     07C7  1D03               	btfss	3,2
   498     07C8  2FCA               	goto	u171
   499     07C9  2FCB               	goto	u170
   500     07CA                     u171:
   501     07CA  2FD5               	goto	l804
   502     07CB                     u170:
   503     07CB                     l800:
   504                           
   505                           ;main.c: 38:             UART_Write_Text(uart_rd);
   506     07CB  3020               	movlw	(low (_uart_rd| 0))& (0+255)
   507     07CC  120A  118A  2713  120A  118A  	fcall	_UART_Write_Text
   508     07D1                     l802:
   509                           
   510                           ;main.c: 39:             PORTBbits.RB5 = 1;
   511     07D1  1283               	bcf	3,5	;RP0=0, select bank0
   512     07D2  1303               	bcf	3,6	;RP1=0, select bank0
   513     07D3  1686               	bsf	6,5	;volatile
   514                           
   515                           ;main.c: 40:         }
   516     07D4  2FB3               	goto	l796
   517     07D5                     l804:
   518     07D5  3005               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   519     07D6  00F0               	movwf	strcmp@r
   520     07D7  3020               	movlw	(low (_uart_rd| 0))& (0+255)
   521     07D8  120A  118A  2762  120A  118A  	fcall	_strcmp
   522     07DD  0870               	movf	?_strcmp,w
   523     07DE  0471               	iorwf	?_strcmp+1,w
   524     07DF  1D03               	btfss	3,2
   525     07E0  2FE2               	goto	u181
   526     07E1  2FE3               	goto	u180
   527     07E2                     u181:
   528     07E2  2FB3               	goto	l796
   529     07E3                     u180:
   530     07E3                     l806:
   531                           
   532                           ;main.c: 42:             UART_Write_Text(uart_rd);
   533     07E3  3020               	movlw	(low (_uart_rd| 0))& (0+255)
   534     07E4  120A  118A  2713  120A  118A  	fcall	_UART_Write_Text
   535     07E9                     l808:
   536                           
   537                           ;main.c: 43:             PORTBbits.RB5 = 0;
   538     07E9  1283               	bcf	3,5	;RP0=0, select bank0
   539     07EA  1303               	bcf	3,6	;RP1=0, select bank0
   540     07EB  1286               	bcf	6,5	;volatile
   541     07EC  2FB3               	goto	l796
   542     07ED  120A  118A  2800   	ljmp	start
   543     07F0                     __end_of_main:
   544                           
   545                           	psect	text1
   546     0762                     __ptext1:	
   547 ;; *************** function _strcmp *****************
   548 ;; Defined at:
   549 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strcmp.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;  l               1    wreg     PTR const unsigned char 
   552 ;;		 -> uart_rd(10), 
   553 ;;  r               1    0[COMMON] PTR const unsigned char 
   554 ;;		 -> STR_2(4), STR_1(4), 
   555 ;; Auto vars:     Size  Location     Type
   556 ;;  l               1    4[COMMON] PTR const unsigned char 
   557 ;;		 -> uart_rd(10), 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  2    0[COMMON] int 
   560 ;; Registers used:
   561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   567 ;;      Params:         2       0       0       0       0
   568 ;;      Locals:         1       0       0       0       0
   569 ;;      Temps:          2       0       0       0       0
   570 ;;      Totals:         5       0       0       0       0
   571 ;;Total ram usage:        5 bytes
   572 ;; Hardware stack levels used: 2
   573 ;; This function calls:
   574 ;;		Nothing
   575 ;; This function is called by:
   576 ;;		_main
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580     0762                     _strcmp:	
   581                           ;psect for function _strcmp
   582                           
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   586                           ;strcmp@l stored from wreg
   587     0762  00F4               	movwf	strcmp@l
   588     0763                     l752:
   589     0763  2F6C               	goto	l758
   590     0764                     l754:
   591     0764  3001               	movlw	1
   592     0765  00FF               	movwf	btemp+1
   593     0766  087F               	movf	btemp+1,w
   594     0767  07F4               	addwf	strcmp@l,f
   595     0768                     l756:
   596     0768  3001               	movlw	1
   597     0769  00FF               	movwf	btemp+1
   598     076A  087F               	movf	btemp+1,w
   599     076B  07F0               	addwf	strcmp@r,f
   600     076C                     l758:
   601     076C  0870               	movf	strcmp@r,w
   602     076D  0084               	movwf	4
   603     076E  120A  118A  2003  120A  118A  	fcall	stringdir
   604     0773  00F2               	movwf	??_strcmp
   605     0774  0874               	movf	strcmp@l,w
   606     0775  0084               	movwf	4
   607     0776  1383               	bcf	3,7	;select IRP bank0
   608     0777  0800               	movf	0,w
   609     0778  0672               	xorwf	??_strcmp,w
   610     0779  1D03               	skipz
   611     077A  2F7C               	goto	u151
   612     077B  2F7D               	goto	u150
   613     077C                     u151:
   614     077C  2F84               	goto	l762
   615     077D                     u150:
   616     077D                     l760:
   617     077D  0874               	movf	strcmp@l,w
   618     077E  0084               	movwf	4
   619     077F  0800               	movf	0,w
   620     0780  1D03               	btfss	3,2
   621     0781  2F83               	goto	u161
   622     0782  2F84               	goto	u160
   623     0783                     u161:
   624     0783  2F64               	goto	l754
   625     0784                     u160:
   626     0784                     l762:
   627     0784  0870               	movf	strcmp@r,w
   628     0785  0084               	movwf	4
   629     0786  120A  118A  2003  120A  118A  	fcall	stringdir
   630     078B  00F2               	movwf	??_strcmp
   631     078C  0874               	movf	strcmp@l,w
   632     078D  0084               	movwf	4
   633     078E  0800               	movf	0,w
   634     078F  00F3               	movwf	??_strcmp+1
   635     0790  0872               	movf	??_strcmp,w
   636     0791  0273               	subwf	??_strcmp+1,w
   637     0792  00F0               	movwf	?_strcmp
   638     0793  01F1               	clrf	?_strcmp+1
   639     0794  1C03               	skipc
   640     0795  03F1               	decf	?_strcmp+1,f
   641     0796                     l628:
   642     0796  0008               	return
   643     0797                     __end_of_strcmp:
   644                           
   645                           	psect	text2
   646     0713                     __ptext2:	
   647 ;; *************** function _UART_Write_Text *****************
   648 ;; Defined at:
   649 ;;		line 14 in file "EUSART.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;  text            1    wreg     PTR const unsigned char 
   652 ;;		 -> uart_rd(10), 
   653 ;; Auto vars:     Size  Location     Type
   654 ;;  text            1    4[COMMON] PTR const unsigned char 
   655 ;;		 -> uart_rd(10), 
   656 ;;  i               2    2[COMMON] int 
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   661 ;; Tracked objects:
   662 ;;		On entry : 0/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   666 ;;      Params:         0       0       0       0       0
   667 ;;      Locals:         3       0       0       0       0
   668 ;;      Temps:          1       0       0       0       0
   669 ;;      Totals:         4       0       0       0       0
   670 ;;Total ram usage:        4 bytes
   671 ;; Hardware stack levels used: 1
   672 ;; Hardware stack levels required when called: 1
   673 ;; This function calls:
   674 ;;		_UART_Write
   675 ;; This function is called by:
   676 ;;		_main
   677 ;;		_UART_Write_Text_ln
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681     0713                     _UART_Write_Text:	
   682                           ;psect for function _UART_Write_Text
   683                           
   684                           
   685                           ;incstack = 0
   686                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   687                           ;UART_Write_Text@text stored from wreg
   688     0713  00F4               	movwf	UART_Write_Text@text
   689     0714                     l730:
   690                           
   691                           ;EUSART.c: 15:     int i;;EUSART.c: 16:     for(i=0;text[i]!='\0';i++){
   692     0714  01F2               	clrf	UART_Write_Text@i
   693     0715  01F3               	clrf	UART_Write_Text@i+1
   694     0716  2F28               	goto	l736
   695     0717                     l732:
   696                           
   697                           ;EUSART.c: 17:         UART_Write(text[i]);
   698     0717  0872               	movf	UART_Write_Text@i,w
   699     0718  0774               	addwf	UART_Write_Text@text,w
   700     0719  00F1               	movwf	??_UART_Write_Text
   701     071A  0871               	movf	??_UART_Write_Text,w
   702     071B  0084               	movwf	4
   703     071C  0800               	movf	0,w
   704     071D  120A  118A  2707  120A  118A  	fcall	_UART_Write
   705     0722                     l734:
   706                           
   707                           ;EUSART.c: 18:     }
   708     0722  3001               	movlw	1
   709     0723  07F2               	addwf	UART_Write_Text@i,f
   710     0724  1803               	skipnc
   711     0725  0AF3               	incf	UART_Write_Text@i+1,f
   712     0726  3000               	movlw	0
   713     0727  07F3               	addwf	UART_Write_Text@i+1,f
   714     0728                     l736:
   715     0728  0872               	movf	UART_Write_Text@i,w
   716     0729  0774               	addwf	UART_Write_Text@text,w
   717     072A  00F1               	movwf	??_UART_Write_Text
   718     072B  0871               	movf	??_UART_Write_Text,w
   719     072C  0084               	movwf	4
   720     072D  1383               	bcf	3,7	;select IRP bank0
   721     072E  0800               	movf	0,w
   722     072F  1D03               	btfss	3,2
   723     0730  2F32               	goto	u121
   724     0731  2F33               	goto	u120
   725     0732                     u121:
   726     0732  2F17               	goto	l732
   727     0733                     u120:
   728     0733                     l23:
   729     0733  0008               	return
   730     0734                     __end_of_UART_Write_Text:
   731                           
   732                           	psect	text3
   733     0707                     __ptext3:	
   734 ;; *************** function _UART_Write *****************
   735 ;; Defined at:
   736 ;;		line 3 in file "EUSART.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  data            1    wreg     const unsigned char 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  data            1    0[COMMON] const unsigned char 
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   750 ;;      Params:         0       0       0       0       0
   751 ;;      Locals:         1       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0
   753 ;;      Totals:         1       0       0       0       0
   754 ;;Total ram usage:        1 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; This function calls:
   757 ;;		Nothing
   758 ;; This function is called by:
   759 ;;		_UART_Write_Text
   760 ;;		_UART_Write_ln
   761 ;;		_UART_Write_Text_ln
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765     0707                     _UART_Write:	
   766                           ;psect for function _UART_Write
   767                           
   768                           
   769                           ;incstack = 0
   770                           ; Regs used in _UART_Write: [wreg]
   771                           ;UART_Write@data stored from wreg
   772     0707  00F0               	movwf	UART_Write@data
   773     0708                     l720:
   774     0708                     l11:	
   775                           ;EUSART.c: 4:     while(!TRMT);
   776                           
   777     0708  1683               	bsf	3,5	;RP0=1, select bank1
   778     0709  1303               	bcf	3,6	;RP1=0, select bank1
   779     070A  1C98               	btfss	24,1	;volatile
   780     070B  2F0D               	goto	u101
   781     070C  2F0E               	goto	u100
   782     070D                     u101:
   783     070D  2F08               	goto	l11
   784     070E                     u100:
   785     070E                     l722:
   786                           
   787                           ;EUSART.c: 5:     TXREG = data;
   788     070E  0870               	movf	UART_Write@data,w
   789     070F  1283               	bcf	3,5	;RP0=0, select bank0
   790     0710  1303               	bcf	3,6	;RP1=0, select bank0
   791     0711  0099               	movwf	25	;volatile
   792     0712                     l14:
   793     0712  0008               	return
   794     0713                     __end_of_UART_Write:
   795                           
   796                           	psect	text4
   797     0734                     __ptext4:	
   798 ;; *************** function _UART_Read_Text *****************
   799 ;; Defined at:
   800 ;;		line 32 in file "EUSART.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;  Output          1    wreg     PTR unsigned char 
   803 ;;		 -> uart_rd(10), 
   804 ;;  lenght          2    0[COMMON] const unsigned int 
   805 ;; Auto vars:     Size  Location     Type
   806 ;;  Output          1    3[COMMON] PTR unsigned char 
   807 ;;		 -> uart_rd(10), 
   808 ;;  i               2    4[COMMON] unsigned int 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   818 ;;      Params:         2       0       0       0       0
   819 ;;      Locals:         3       0       0       0       0
   820 ;;      Temps:          1       0       0       0       0
   821 ;;      Totals:         6       0       0       0       0
   822 ;;Total ram usage:        6 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; Hardware stack levels required when called: 1
   825 ;; This function calls:
   826 ;;		_UART_Read
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832     0734                     _UART_Read_Text:	
   833                           ;psect for function _UART_Read_Text
   834                           
   835                           
   836                           ;incstack = 0
   837                           ; Regs used in _UART_Read_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   838                           ;UART_Read_Text@Output stored from wreg
   839     0734  00F3               	movwf	UART_Read_Text@Output
   840     0735                     l738:
   841                           
   842                           ;EUSART.c: 33:     for(unsigned int i = 0; i<lenght; i++){
   843     0735  01F4               	clrf	UART_Read_Text@i
   844     0736  01F5               	clrf	UART_Read_Text@i+1
   845     0737                     l740:
   846     0737  0870               	movf	UART_Read_Text@lenght,w
   847     0738  0471               	iorwf	UART_Read_Text@lenght+1,w
   848     0739  1D03               	btfss	3,2
   849     073A  2F3C               	goto	u131
   850     073B  2F3D               	goto	u130
   851     073C                     u131:
   852     073C  2F3E               	goto	l744
   853     073D                     u130:
   854     073D  2F5A               	goto	l750
   855     073E                     l744:
   856                           
   857                           ;EUSART.c: 34:         Output[i] = UART_Read();
   858     073E  0874               	movf	UART_Read_Text@i,w
   859     073F  0773               	addwf	UART_Read_Text@Output,w
   860     0740  00F2               	movwf	??_UART_Read_Text
   861     0741  0872               	movf	??_UART_Read_Text,w
   862     0742  0084               	movwf	4
   863     0743  120A  118A  26FF  120A  118A  	fcall	_UART_Read
   864     0748  1383               	bcf	3,7	;select IRP bank0
   865     0749  0080               	movwf	0
   866     074A                     l746:
   867                           
   868                           ;EUSART.c: 35:     }
   869     074A  3001               	movlw	1
   870     074B  07F4               	addwf	UART_Read_Text@i,f
   871     074C  1803               	skipnc
   872     074D  0AF5               	incf	UART_Read_Text@i+1,f
   873     074E  3000               	movlw	0
   874     074F  07F5               	addwf	UART_Read_Text@i+1,f
   875     0750                     l748:
   876     0750  0871               	movf	UART_Read_Text@lenght+1,w
   877     0751  0275               	subwf	UART_Read_Text@i+1,w
   878     0752  1D03               	skipz
   879     0753  2F56               	goto	u145
   880     0754  0870               	movf	UART_Read_Text@lenght,w
   881     0755  0274               	subwf	UART_Read_Text@i,w
   882     0756                     u145:
   883     0756  1C03               	skipc
   884     0757  2F59               	goto	u141
   885     0758  2F5A               	goto	u140
   886     0759                     u141:
   887     0759  2F3E               	goto	l744
   888     075A                     u140:
   889     075A                     l750:
   890                           
   891                           ;EUSART.c: 36:     Output[lenght]='\0';
   892     075A  0870               	movf	UART_Read_Text@lenght,w
   893     075B  0773               	addwf	UART_Read_Text@Output,w
   894     075C  00F2               	movwf	??_UART_Read_Text
   895     075D  0872               	movf	??_UART_Read_Text,w
   896     075E  0084               	movwf	4
   897     075F  1383               	bcf	3,7	;select IRP bank0
   898     0760  0180               	clrf	0
   899     0761                     l37:
   900     0761  0008               	return
   901     0762                     __end_of_UART_Read_Text:
   902                           
   903                           	psect	text5
   904     06FF                     __ptext5:	
   905 ;; *************** function _UART_Read *****************
   906 ;; Defined at:
   907 ;;		line 27 in file "EUSART.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;		None
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      unsigned char 
   914 ;; Registers used:
   915 ;;		wreg
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   921 ;;      Params:         0       0       0       0       0
   922 ;;      Locals:         0       0       0       0       0
   923 ;;      Temps:          0       0       0       0       0
   924 ;;      Totals:         0       0       0       0       0
   925 ;;Total ram usage:        0 bytes
   926 ;; Hardware stack levels used: 1
   927 ;; This function calls:
   928 ;;		Nothing
   929 ;; This function is called by:
   930 ;;		_UART_Read_Text
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934     06FF                     _UART_Read:	
   935                           ;psect for function _UART_Read
   936                           
   937     06FF                     l724:	
   938                           ;incstack = 0
   939                           ; Regs used in _UART_Read: [wreg]
   940                           
   941     06FF                     l29:	
   942                           ;EUSART.c: 28:     while(!RCIF);
   943                           
   944     06FF  1283               	bcf	3,5	;RP0=0, select bank0
   945     0700  1303               	bcf	3,6	;RP1=0, select bank0
   946     0701  1E8C               	btfss	12,5	;volatile
   947     0702  2F04               	goto	u111
   948     0703  2F05               	goto	u110
   949     0704                     u111:
   950     0704  2EFF               	goto	l29
   951     0705                     u110:
   952     0705                     l726:
   953                           
   954                           ;EUSART.c: 29:     return RCREG;
   955     0705  081A               	movf	26,w	;volatile
   956     0706                     l32:
   957     0706  0008               	return
   958     0707                     __end_of_UART_Read:
   959     007E                     btemp	set	126	;btemp
   960     007E                     wtemp0	set	126
   961                           
   962                           	psect	idloc
   963                           
   964                           ;Config register IDLOC0 @ 0x2000
   965                           ;	unspecified, using default values
   966     2000                     	org	8192
   967     2000  3FFF               	dw	16383
   968                           
   969                           ;Config register IDLOC1 @ 0x2001
   970                           ;	unspecified, using default values
   971     2001                     	org	8193
   972     2001  3FFF               	dw	16383
   973                           
   974                           ;Config register IDLOC2 @ 0x2002
   975                           ;	unspecified, using default values
   976     2002                     	org	8194
   977     2002  3FFF               	dw	16383
   978                           
   979                           ;Config register IDLOC3 @ 0x2003
   980                           ;	unspecified, using default values
   981     2003                     	org	8195
   982     2003  3FFF               	dw	16383
   983                           
   984                           	psect	config
   985                           
   986                           ;Config register CONFIG @ 0x2007
   987                           ;	Oscillator Selection bits
   988                           ;	FOSC = HS, HS oscillator
   989                           ;	Watchdog Timer Enable bit
   990                           ;	WDTE = OFF, WDT disabled
   991                           ;	Power-up Timer Enable bit
   992                           ;	PWRTE = OFF, PWRT disabled
   993                           ;	Brown-out Reset Enable bit
   994                           ;	BOREN = OFF, BOR disabled
   995                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   996                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   997                           ;	Data EEPROM Memory Code Protection bit
   998                           ;	CPD = OFF, Data EEPROM code protection off
   999                           ;	Flash Program Memory Write Enable bits
  1000                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1001                           ;	In-Circuit Debugger Mode bit
  1002                           ;	DEBUG = 0x1, unprogrammed default
  1003                           ;	Flash Program Memory Code Protection bit
  1004                           ;	CP = OFF, Code protection off
  1005     2007                     	org	8199
  1006     2007  3F3A               	dw	16186

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@l	PTR const unsigned char  size(1) Largest target is 10
		 -> uart_rd(BANK0[10]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), STR_2(CODE[4]), 

    UART_Read_Text@Output	PTR unsigned char  size(1) Largest target is 10
		 -> uart_rd(BANK0[10]), 

    UART_Write_Text@text	PTR const unsigned char  size(1) Largest target is 10
		 -> uart_rd(BANK0[10]), 


Critical Paths under _main in COMMON

    _main->_UART_Read_Text
    _UART_Write_Text->_UART_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     828
                     _UART_Read_Text
                    _UART_Write_Text
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               5     3      2     330
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      4     4      0     211
                                              1 COMMON     4     4      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Read_Text                                       6     4      2     287
                                              0 COMMON     6     4      2
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Read_Text
     _UART_Read
   _UART_Write_Text
     _UART_Write
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      10       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       A       5       12.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      10      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Jul 03 09:40:14 2024

                      pc 0002                       l11 0708                       l14 0712  
                     l23 0733                       l32 0706                       l29 06FF  
                     l37 0761                       fsr 0004                      l720 0708  
                    l800 07CB                      l722 070E                      l730 0714  
                    l802 07D1                      l724 06FF                      l740 0737  
                    l732 0717                      l628 0796                      l804 07D5  
                    l726 0705                      l750 075A                      l734 0722  
                    l806 07E3                      l744 073E                      l736 0728  
                    l760 077D                      l752 0763                      l808 07E9  
                    l746 074A                      l738 0735                      l762 0784  
                    l754 0764                      l748 0750                      l756 0768  
                    l780 07A3                      l758 076C                      l790 07AE  
                    l782 07A5                      l774 0797                      l792 07AF  
                    l784 07A8                      l776 079B                      l794 07B2  
                    l786 07A9                      l778 079E                      l796 07B3  
                    l788 07AD                      l798 07BD                      u100 070E  
                    u101 070D                      u110 0705                      u111 0704  
                    u120 0733                      u121 0732                      u130 073D  
                    u131 073C                      u140 075A                      u141 0759  
                    u150 077D                      u151 077C                      u160 0784  
                    u145 0756                      u161 0783                      u170 07CB  
                    u171 07CA                      u180 07E3                      u181 07E2  
                    fsr0 0004                      indf 0000                     STR_1 0009  
                   STR_2 000D                     _RCIF 0065                     _TRMT 04C1  
                   _main 0797                     btemp 007E                     start 0000  
__end_of_UART_Write_Text 0734                    ?_main 0070                    _CMCON 009C  
                  _RCREG 001A     UART_Read_Text@Output 0073                    _SPBRG 0099  
                  _PORTB 0006                    _PORTC 0007                    _TRISB 0086  
                  _TRISC 0087                    _TXREG 0019              ?_UART_Write 0070  
   UART_Read_Text@lenght 0070                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07F0             __end_of_main 07F0  
                 ??_main 0076                   _ADCON0 001F                   _ADCON1 009F  
      __end_of_UART_Read 0707         ?_UART_Write_Text 0070                   _strcmp 0762  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pbssBANK0 0020  
             __pmaintext 0797                  ?_strcmp 0070             ??_UART_Write 0070  
             __stringtab 0003       __end_of_UART_Write 0713           _UART_Read_Text 0734  
                __ptext1 0762                  __ptext2 0713                  __ptext3 0707  
                __ptext4 0734                  __ptext5 06FF                  _uart_rd 0020  
   end_of_initialization 07FC   __end_of_UART_Read_Text 0762                _RCSTAbits 0018  
                strcmp@l 0074                  strcmp@r 0070                _UART_Read 06FF  
              _PORTBbits 0006           UART_Write@data 0070                _TXSTAbits 0098  
        ?_UART_Read_Text 0070               ?_UART_Read 0070           __end_of_strcmp 0797  
    start_initialization 07F0                 ??_strcmp 0072                ___latbits 0002  
            ??_UART_Read 0070                __pstrings 0003        ??_UART_Write_Text 0071  
        UART_Read_Text@i 0074              __stringbase 0008         ??_UART_Read_Text 0072  
     __end_of__stringtab 0009      UART_Write_Text@text 0074                stringcode 0003  
        _UART_Write_Text 0713                 stringdir 0003                 stringtab 0003  
             _UART_Write 0707         UART_Write_Text@i 0072  
